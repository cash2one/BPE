#!/bin/bash

APPBIN="bpe"
logFile="./service.log";


apppath=$APPBIN;
command="service $1";

# Get a sane screen width
[ -z "${COLUMNS:-}" ] && COLUMNS=80

if [ -f /etc/sysconfig/i18n -a -z "${NOLOCALE:-}" ] ; then
  . /etc/sysconfig/i18n
  if [ "$CONSOLETYPE" != "pty" ]; then
	case "${LANG:-}" in
		ja_JP*|ko_KR*|zh_CN*|zh_TW*)
			export LC_MESSAGES=en_US
			;;
		*)
			export LANG
			;;
	esac
  else
	export LANG
  fi
fi

# Read in our configuration
if [ -z "${BOOTUP:-}" ]; then
  if [ -f /etc/sysconfig/init ]; then
      . /etc/sysconfig/init
  else
    # This all seem confusing? Look in /etc/sysconfig/init,
    # or in /usr/doc/initscripts-*/sysconfig.txt
    BOOTUP=color
    RES_COL=60
    MOVE_TO_COL="echo -en \\033[${RES_COL}G"
    SETCOLOR_SUCCESS="echo -en \\033[1;32m"
    SETCOLOR_FAILURE="echo -en \\033[1;31m"
    SETCOLOR_WARNING="echo -en \\033[1;33m"
    SETCOLOR_NORMAL="echo -en \\033[0;39m"
    LOGLEVEL=1
  fi
  if [ "$CONSOLETYPE" = "serial" ]; then
      BOOTUP=serial
      MOVE_TO_COL=
      SETCOLOR_SUCCESS=
      SETCOLOR_FAILURE=
      SETCOLOR_WARNING=
      SETCOLOR_NORMAL=
  fi
fi

if [ "${BOOTUP:-}" != "verbose" ]; then
   INITLOG_ARGS="-q"
else
   INITLOG_ARGS=
fi

WriteLog()
{
	msg=$1;
	time=$(date +"%Y-%m-%d %H:%M:%S");
	user=$(whoami);
	echo "$time   $user   [$command]   [$msg]" >> $logFile;
}
MyExit()
{
	code=$1;
	msg=$2;
	
	WriteLog "$msg";
	exit $code;
}
# Check if $pid (could be plural) are running
checkpid() {
	local i

	for i in $* ; do
		[ -d "/proc/$i" ] || return 1
	done
	return 0
}
echo_success() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "[  "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"OK"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "  ]"
  echo -ne "\r"
  if [ "$BOOTUP" = "graphical" -a -x /usr/bin/rhgb-client ]; then
    /usr/bin/rhgb-client -ping
  fi
  return 0
}

echo_failure() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n $"FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  if [ "$BOOTUP" = "graphical" -a -x /usr/bin/rhgb-client ]; then
    /usr/bin/rhgb-client -ping
  fi
  return 1
}
echo_running() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"Running"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  if [ "$BOOTUP" = "graphical" -a -x /usr/bin/rhgb-client ]; then
    /usr/bin/rhgb-client -ping
  fi
  return 0
}


echo_stop() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo -n $"Stopped"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  if [ "$BOOTUP" = "graphical" -a -x /usr/bin/rhgb-client ]; then
    /usr/bin/rhgb-client -ping
  fi
  return 1
}


echo_warning() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo -n $"WARNING"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  if [ "$BOOTUP" = "graphical" -a -x /usr/bin/rhgb-client ]; then
    /usr/bin/rhgb-client -ping
  fi
  return 1
}

OLD_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$(pwd)/lib

unset APP
if test -x $apppath
then
    APP=$apppath
fi

test "$APP" || { echo $apppath" not exists or not executable"; echo_failure; echo;exit 0; } 

app_pid_file=$(pwd)/"$APPBIN"_$(whoami).pid

start_app()
{
    if [ -e $app_pid_file ]; then
    	 ppid=$(cat $app_pid_file)
    	 psreault=`ps aux|grep $ppid|grep -v grep|grep $apppath`
    	 if [ "$psreault"x !=  ""x ]; then
	        echo "Warning: server is running, or you want restart?"
	        echo_warning
	        echo
	        #exit 1
	        MyExit 1 "Warning: server is running"
        fi
    fi
    if [ ! -f ./config.xml ]; then
                echo "Fail: server configuration file(config.xml) NOT found!"
                echo_failure
                echo
                #exit 1
				MyExit 1 "Fail: file(config.xml) NOT found!"
    fi
    if [ ! -f ./log.properties ]; then
                echo "Fail: log configuration file(log.properties) NOT found!"
                echo_failure
                echo
                #exit 1
                MyExit 1 "Fail: file(log.properties) NOT found!"
    fi
    echo  "Starting app ......"
    nohup ./$APP>/dev/null 2>&1 &
    echo $! > $app_pid_file 
	sleep 1

	 ppid=$!
	 psreault=`ps aux|grep $ppid|grep -v grep|grep $apppath`
	 if [ "$psreault"x !=  ""x ]; then
		cpid=`ps -ef|awk '{if($3=="'$ppid'") printf $2}'`
		if [ "$cpid"x !=  ""x ]; then
			echo_success
			echo
			#exit 0
			MyExit 0 "success"
		fi
		echo_failure
		echo
		#exit 1
		MyExit 1 "fail"
	fi
	echo_failure
	echo
	#exit 1
		MyExit 1 "fail"

}

stop_app()
{
    if [ -e $app_pid_file ]; then 
        echo  -n "Stopping service "
        ppid=$(cat $app_pid_file)
		psreault=`ps aux|grep $ppid|grep -v grep|grep $apppath`
    	if [ "$psreault"x !=  ""x ]; then
			cpid=`ps -ef|awk '{if($3=="'$ppid'") printf $2." "}'`
			kill $ppid
            kill -15 $cpid
            for (( i = 0; i < 10 ; i++))
            do  
            echo -n "." 
            psreault=`ps aux|grep $cpid|grep -v grep|grep $apppath`
            if [ "$psreault"x =  ""x ]; then
                break
            fi
            sleep 1s
            done
            echo ""
		fi
    fi 
    rm -f $app_pid_file
    echo_success
    echo
}
show_app_version()
{
	./$APP -v;
}

case "$1" in
    version)
        show_app_version;
        ;;
    -v)
        show_app_version;
        ;;
    start)
        start_app ;
        #exit 0
        MyExit 0 "success"
        ;;

    stop)
        stop_app ; 
        #exit 0
        MyExit 0 "success"
        ;;
    restart)
    	stop_app; 
    	sleep 1
    	start_app ;
        #exit 0
        MyExit 0 "success"
        ;;
    status)
		if [ -e $app_pid_file ]; then
			 ppid=$(cat $app_pid_file)
				 psreault=`ps aux|grep $ppid|grep -v grep|grep $apppath`
				 if [ "$psreault"x !=  ""x ]; then
					cpid=`ps -ef|awk '{if($3=="'$ppid'") printf $2}'`
					if [ "$cpid"x !=  ""x ]; then
						echo_running
						echo
						#exit 0
						MyExit 0 "running"
					fi
					echo_warning
					echo
					#exit 1
					MyExit 1 "warning"
				fi
		 fi	
        echo_stop
        echo
        #exit 1
        MyExit 1 "stopped"
        ;;
     *)
       echo $"Usage: $0 {start|stop|restart|status|version|-v}"
       #exit 1
       MyExit 1 "Bad Command";
       ;;

esac

MyExit 0 "success"
export LD_LIBRARY_PATH=$OLD_LD_LIBRARY_PATH


